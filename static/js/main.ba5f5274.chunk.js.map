{"version":3,"sources":["components/Todo/Todo.js","components/Form/Form.js","components/FilterButton/FilterButton.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","id","type","defaultChecked","completed","onChange","toggleTaskCompleted","htmlFor","name","onClick","deleteTask","Form","useState","setName","onSubmit","event","preventDefault","addTask","autoComplete","value","target","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","taskList","key","filterList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba5f5274.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {useState} from 'react';\r\n\r\n\r\nconst Todo = (props) => {\r\n    return (\r\n        <li className=\"todo stack-small\">\r\n        <div className=\"c-cb\">\r\n          <input \r\n            id={props.id} \r\n            type=\"checkbox\" \r\n            defaultChecked={props.completed} \r\n            onChange = {() => props.toggleTaskCompleted(props.id)}/>\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n         \r\n          <button \r\n            type=\"button\"  \r\n            className=\"btn btn__danger\"\r\n            onClick = {() => props.deleteTask(props.id)}\r\n            >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n      </li>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React, { useState } from \"react\";\r\n\r\nconst Form = (props) => {\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.addTask(name);\r\n        setName('');\r\n    }\r\n    \r\n    const handleChange = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    const [name, setName] = useState ('');\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                What needs to be done?\r\n            </label>\r\n            </h2>\r\n            <input\r\n            type=\"text\"\r\n            id=\"new-todo-input\"\r\n            className=\"input input__lg\"\r\n            name=\"text\"\r\n            autoComplete=\"off\"\r\n            value={name}\r\n            onChange = {handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n            Add\r\n            </button>\r\n      </form>\r\n    )\r\n\r\n\r\n}\r\nexport default Form;","import React, { useState } from 'react';\r\n\r\nconst FilterButton = (props) => {\r\n\r\n\r\n    return(\r\n        <button type=\"button\" \r\n            className=\"btn toggle-btn\" \r\n            aria-pressed={props.isPressed}\r\n            onClick = { () => props.setFilter(props.name)}\r\n            >\r\n          <span className=\"visually-hidden\">Show </span>\r\n          <span>{props.name}</span>\r\n          <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default FilterButton;","import React from \"react\";\nimport './App.css';\nimport Todo from './components/Todo/Todo';\nimport Form from './components/Form/Form';\nimport FilterButton from './components/FilterButton/FilterButton'\nimport { useState } from 'react';\nimport { nanoid } from \"nanoid\";\n\n//outside app, never change filter\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed:task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\n\nfunction App(props) {\n  \n  const [tasks, setTasks] = useState([]);\n\n  const [filter, setFilter] = useState(['All']);\n\n  const addTask= (name)=> {\n    const newTask = {id: \"todo-\" + nanoid(), name: name, completed:false};\n    setTasks([...tasks, newTask])\n  };\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task =>{\n      if(id === task.id){\n        // use object spread to make a new object\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask (id) {\n    const remainingTasks = tasks.filter(task => id !==task.id);\n    setTasks(remainingTasks);\n  }\n\n\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted= {toggleTaskCompleted}\n        deleteTask = {deleteTask}\n      />\n    )\n  );\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key = {name} \n      name = {name}\n      isPressed ={name ===filter}\n      setFilter = {setFilter}\n      />\n  ))\n  \n  const tasksNoun = taskList.length !== 1? 'tasks' :'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask = {addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n      {taskList}  \n\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}